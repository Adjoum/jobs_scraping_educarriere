name: Adjoum Job Scraper

on:
  schedule:
    # Ex√©cute tous les jours √† minuit (00:00 UTC)
    - cron: '0 0 * * *'
  workflow_dispatch:  # Permet de d√©clencher manuellement le workflow depuis GitHub

jobs:
  scrape:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # R√©cup√®re tout l'historique pour les commits
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run scraper
      env:
        API_KEY: ${{ secrets.SCRAPER_API_KEY }}
        #DATABASE_URL: ${{ secrets.DATABASE_URL }}
        RENDER_API_URL: ${{ secrets.RENDER_API_URL }}
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        python scraper/educarriere_scraper.py
        
    - name: Push scraped data to API
      run: |
        # Cette √©tape envoie les donn√©es scrap√©es √† votre API Render
        # Si vous utilisez SQLite, vous pouvez ajouter un script pour mettre √† jour la base de donn√©es distante
        today=$(date +'%Y-%m-%d')
        if [ -f "educarriere_data/educarriere_jobs_${today}.json" ]; then
          echo "Sending new jobs to API..."
          curl -X POST -H "Content-Type: application/json" -d @"educarriere_data/educarriere_jobs_${today}.json" ${{ secrets.RENDER_API_URL }}/import
        else
          echo "No new jobs found today."
        fi
        
    - name: Commit and push if changes
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        
        # Ajouter les nouveaux fichiers
        git add educarriere_data/
        
        # V√©rifier s'il y a des changements √† committer
        if git diff --staged --quiet; then
          echo "Aucune nouvelle offre d'emploi d√©tect√©e."
        else
          today=$(date +'%Y-%m-%d')
          
          # Construire le message de commit
          if [ -f "educarriere_data/educarriere_jobs_${today}.csv" ]; then
            jobs_count=$(($(wc -l < "educarriere_data/educarriere_jobs_${today}.csv") - 1))
            commit_message="üìù ${jobs_count} nouvelles offres d'emploi ajout√©es (${today})"
          else
            commit_message="üìù Mise √† jour des donn√©es d'emploi (${today})"
          fi
          
          # Committer d'abord les changements
          git commit -m "$commit_message"
          
          # R√©cup√©rer l'√©tat distant et r√©soudre les conflits si n√©cessaire
          git pull --no-rebase --strategy-option=ours origin main
          
          # Pousser les changements
          git push origin main
        fi
